/**
 * This module handles commands, namely generating.
 */
module.exports = {
  /**
   * Generates a command for notifying clients of user deletion.
   * @param  {string} name The name of the deleted user.
   * @return {Object} command The generated deleteuser command.
   */
  generateDeleteUser: function(name) {
    return makeCommand('deleteuser', ['name', name]);
  },

  /**
   * Generates a command for notifying clients of a new user.
   * @param  {string} name The name of the new user.
   * @return {Object} command The generated adduser command.
   */
  generateAddUser: function(name) {
    return makeCommand('adduser', ['name', name]);
  },

  /**
   * Generates a command for sending the complete userlist to a new user.
   * @param  {array} users The names of all the connected users.
   * @return {Object} command The generated userlist command.
   */
  generateClientList: function(users) {
    return makeCommand('userlist', ['users', users]);
  },

  /**
   * Generates a command for sending the complete userlist to a new user.
   * @param  {array} users The names of all the connected users.
   * @return {Object} command The generated chatmessage command.
   */
  generateChatMessage: function(message) {
    return makeCommand('chatmessage', ['date', message.date], ['name', message.name], ['message', message.message]);
  },

  /**
   * Generates a command for sending the complete chat history to a new user.
   * @param  {array} history The array of all the messages in the chat history.
   * @return {Object} command The generated chathistory command.
   */
  generateChatHistory: function(history) {
    return makeCommand('chathistory', ['history', history]);
  }
};

/**
 * Generic function to generate orders.
 * @param  {string} type      The type of the order to be generated.
 * @param  {array} arguments The arguments for the type of order to be generated.
 * @return {Object} command The generated command.
 */
function makeCommand(type, ...arguments) {
    var command = {};

    command.type = type;
    arguments.forEach(function addArgumentsToCommand(arg) {
      command[arg[0]] = arg[1];
    });

    return JSON.stringify(command);
}
