var fs = require('fs'),       //required for reading files
    log = require('logger');  //required for logging errors and messages

/**
 * Handles the request path to server path conversion.
 * @type {Object}
 */
var paths = {
  '/': './resources/html/index.html',
  '/style.css': './resources/css/style.css',
  '/logic.js': './resources/javascript/logic.js'
};

/**
 * Handles file ending to mimetype conversion.
 * @type {Object}
 */
var types = {
  '.css': 'text/css',
  '.js': 'application/javascript',
  '.html': 'text/html'
};

/**
 * Logs an error if file does not exist / was not found.
 * @param  {http.ServerResponse} res  The response from the connection.
 * @param  {string} path The path the client was looking for.
 * @param  {string=} resource The path on the server for the file, only if it should be there (i.e. is in the paths object).
 */
function throwError(res, path, resource) {
  res.writeHead(404);
  res.end("File not found.");
  if (resource === undefined) {
    log.error("Client requested inexisting file " + path + ", abort");
  } else {
    log.error("Client requested existing file " + path + " with server-dir " + resource + ", but not found");
  }
}

module.exports = {
  /**
   * Sends the file to the client if existing, otherwise logs an error.
   * @param  {http.ServerResponse} res  The response object for the connection.
   * @param  {string} path The path the client requested.
   */
  sendFile: function(res, path) {
    var resource = paths[path];
    if (resource === undefined) {
      throwError(res, path);
    } else {
      fs.readFile(resource, function(err, data) {
        if (err) {
          throwError(res, path, resource);
        } else {
          res.setHeader("Content-Type", types[/\.[^.]*$/.exec(resource)[0]]);
          res.writeHead(200);
          res.end(data);
          log.log('Client requested ' + path + ': Served ' + resource + ' according to database');
        }
      });
    }
  }
};
